// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relation 
  posts Post[]
  likes Like[]
  comments Comment[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  notifications Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("userNotificationCreated")

}

model Post{
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relation
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // delete all post when user has been deleted automaticallt handeled by prisma
  comments Comment[]
  likes Like[]
  notifications Notification[]
}


model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
   
   @@index([postId, authorId]) // compositr index for faster queries
  
}


model Like{
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post  Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, userId])
  @@unique([postId, userId]) // prevenr same user likes more than one

}
model 